# -*- coding: utf-8 -*-
"""gender class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qnZWJjfSXMmv-0u4V7Iau27xQrKKj8Me
"""

from google.colab import drive
drive.mount('/content/gdrive/')

from google.colab import files
files.upload()

import tensorflow as tf

import matplotlib.pylab as plt

import tensorflow_hub as hub
import tensorflow_datasets as tfds

from tensorflow.keras import layers

import logging
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d gpiosenka/gender-classification-from-an-image

import tensorflow as tf
from urllib.request import urlretrieve
import zipfile
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np

zip_ref = zipfile.ZipFile(r"/content/gender-classification-from-an-image.zip", 'r') #Opens the zip file in read mode
zip_ref.extractall('/home') #Extracts the files into the /tmp folder
zip_ref.close()

training_dir = '/home/gender/train'
validation_dir = '/home/gender/valid'

train_datagen = ImageDataGenerator(rescale=1./255,
  rotation_range=40,
  width_shift_range=0.2,
  height_shift_range=0.2,
  shear_range=0.2,
  zoom_range=0.2,
  horizontal_flip=True,
  fill_mode='nearest'
 )

Batch_size = 50
IMAGE_RES = 150
train_data_gen = train_datagen.flow_from_directory(directory=training_dir,
                                                           target_size=(IMAGE_RES, IMAGE_RES),
                                                           batch_size=Batch_size,
                                                           shuffle=True,
                                                           class_mode='binary')

validation_image_generator = ImageDataGenerator(rescale=1./255)

validation_data_gen = train_datagen.flow_from_directory(directory=validation_dir,
                                                           target_size=(IMAGE_RES, IMAGE_RES),
                                                           batch_size=Batch_size,
                                                           shuffle=True,
                                                           class_mode='binary')

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(16, (3,3), input_shape=(150, 150, 3), 
                                                           activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512, activation='relu'),
                                    tf.keras.layers.Dense(2, activation='softmax')])

model.summary()

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

Epochs = 15

history = model.fit(train_data_gen,
                    epochs=Epochs,
                    validation_data=validation_data_gen)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(Epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.savefig('./foo.png')
plt.show()

from tensorflow.keras.models import load_model
model.save('weights.h5')

predictions = model.predict(validation_data_gen)

predictions[0]

predictions= np.argmax(predictions[0])

predictions

import numpy as np
from google.colab import files 
from keras.preprocessing import image

uploaded=files.upload()

for fn in uploaded.keys():

# predicting images

  path='/content/' + fn

  img=image.load_img(path, target_size=(150, 150))

  x = image.img_to_array(img)
  x=x/225
  x= np.expand_dims(x, axis=0)
  image_tensor = np.vstack([x])
  classes = model.predict(image_tensor)
  classes = np.argmax(classes, axis=1)
        #print(classes * 10)
  if classes==0:
    print('This is a male gender')
  else:
    print('This is a female gender')







